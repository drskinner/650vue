(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["pages"],{"19d5":function(e,t,a){"use strict";var s=a("9674"),i=a.n(s);i.a},5563:function(e,t,a){"use strict";var s=a("e772"),i=a.n(s);i.a},6316:function(e,t,a){"use strict";a.r(t);var s=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},i=[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"terminal-help-content"},[s("h1",[e._v("Using the Terminal")]),s("div",{staticClass:"row"},[s("div",{staticClass:"column-left"},[s("figure",[s("img",{attrs:{src:a("c025")}}),s("figcaption",[e._v("650Vue's "),s("em",[e._v("Vuepermon")]),e._v(" virtual terminal")])])]),s("div",{staticClass:"column-right"},[s("p",[e._v(" The main way of interacting with the 650Vue virtual machine is through the virtual terminal. The large, upper window displays the terminal's output, and the small, lower box is where you enter commands. There's no \"submit\" button; just enter a one-line command into the input box and press RETURN. The terminal will process your command and display the results in the output window. ")]),s("p",[e._v(" The terminal gives you access to a monitor that is similar to the Commodore 128's built-in machine language monitor or Jim Butterfield's "),s("a",{attrs:{href:"https://github.com/jblang/supermon64",target:"_blank"}},[e._v("Supermon")]),e._v(" for Commodore's 8-bit computers. Anyone who used Supermon back in the day should feel right at home with 650Vue's monitorâ€”which, in the interest of terrible wordplay, we can call "),s("em",[e._v("Vuepermon")]),e._v(". With Vuepermon, you can examine and modify virtual RAM and the 6502's status registers. You can enter new instructions through the simple assembler and read through existing programs with the disassembler. You can load programs from the virtual disk and run them from the terminal. ")]),s("h2",[e._v("Vuepermon Command Reference")]),s("dl",[s("dt",[s("code",[e._v("d [<address>]")])]),s("dd",[e._v(" Example: "),s("code",[e._v("d c000")]),s("br"),e._v(" Disassemble 16 instructions beginning at <address>. After the first 16 lines are displayed, entering "),s("code",[e._v("d")]),e._v(" with no arguments will continue disassembling from where you left off. ")]),s("dt",[s("code",[e._v("g [<address>]")])]),s("dd",[e._v(" Example: "),s("code",[e._v("g c000")]),s("br"),e._v(" Begin executing code from "),s("code",[e._v("address")]),e._v(". 650Vue will continue execution until it encounters a "),s("code",[e._v("BRK")]),e._v(" instruction, an illegal opcode, or receives a Non-Maskable Interrupt telling it to stop. If you don't supply an address, execution will begin at the program counter's current value. ")]),s("dt",[s("code",[e._v("l <filename>")])]),s("dd",[e._v(" Example: "),s("code",[e._v("l hello")]),s("br"),e._v(" Load "),s("code",[e._v("filename")]),e._v(" from the virtual disk. Do not enclose filename in quotes. ")]),s("dt",[s("code",[e._v("m [<start_address>] [<end_address>]")])]),s("dd",[e._v(" Example: "),s("code",[e._v("m bff0 c010")]),s("br"),e._v(" Display up to 128 bytes of memory beginning at "),s("code",[e._v("start_address")]),e._v(". Each line of the display will list a 16-bit hexadecimal address, then the hexadecimal values of the 8 bytes starting at that address, followed by the ASCII representation of those same 8 bytes. After the first screenful of data, entering "),s("code",[e._v("m")]),e._v(" with no arguments will continue displaying memory from where you left off. ")]),s("dt",[s("code",[e._v("p <address>")])]),s("dd",[e._v(" Example: "),s("code",[e._v("p c000")]),s("br"),e._v(" Set the Program Counter to "),s("code",[e._v("address")]),e._v(". Used when you want to start single-stepping from a specific instruction. ")]),s("dt",[s("code",[e._v("r")])]),s("dd",[e._v(" Display the 6502 registers. ")]),s("dt",[s("code",[e._v("z")])]),s("dd",[e._v(" Fill screen RAM with zeroes and force a screen refresh, effectively clearing the video display. ")]),s("dt",[s("code",[e._v("$")])]),s("dd",[e._v(" List a directory of the files on the virtual disk. ")]),s("dt",[s("code",[e._v("> <address> <byte> [<byte> <byte> ...]")])]),s("dd",[e._v(" Example: "),s("code",[e._v("> c010 48 65 6c 6c 6f 2c 20")]),s("br"),e._v(" Write a series of hexadecimal bytes to memory, beginning at "),s("code",[e._v("address")]),e._v(". You can enter as many bytes as will fit in a single line of input. ")]),s("dt",[s("code",[e._v("; <pc> <sr> <ac> <xr> <yr> <sp>")])]),s("dd",[e._v(" Example: "),s("code",[e._v("; c000 30 a0 00 00 fd")]),s("br"),e._v(" Set all the CPU registers. You must include all registers in order, from left to right: program counter, status register, accumulator, x-register, y-register, and stack pointer. ")]),s("dt",[s("code",[e._v(". <address> <opcode> [<operand>]")])]),s("dd",[e._v(" Example: "),s("code",[e._v(". c000 lda #$2a")]),s("br"),e._v(" Assemble one instruction at "),s("code",[e._v("address")]),e._v(". The assembler will determine the correct addressing mode from the syntax of "),s("code",[e._v("operand")]),e._v(". You must enter the operand precisely (see Addressing Modes below). When you enter a valid instruction, the terminal will prompt you to enter a new opcode at the next available address. ")])]),s("h2",[e._v("Addressing Modes")]),s("p",[e._v(" Vuepermon's assembler is very simple and not user-friendly. As of this writing, you can't use labels or macros and you have to enter instructions with the precise syntax the assembler expects. While I don't intend to teach 6502 assembly language here, I thought it would be helpful to lay out the address modes and their syntax for reference. ")]),s("table",[s("tr",[s("th",[e._v("Addressing Mode")]),s("th",[e._v("Example Syntax")]),s("th",[e._v("Comments")])]),s("tr",[s("td",[e._v("Absolute")]),s("td",[s("code",[e._v("jsr $ffd2")])])]),s("tr",[s("td",[e._v("Absolute,X")]),s("td",[s("code",[e._v("lda $c000,x")])])]),s("tr",[s("td",[e._v("Absolute,Y")]),s("td",[s("code",[e._v("sta $c000,y")])])]),s("tr",[s("td",[e._v("Accumulator")]),s("td",[s("code",[e._v("ror")])]),s("td",[e._v("Use "),s("code",[e._v("ror")]),e._v(" instead of "),s("code",[e._v("ror a")]),e._v(".")])]),s("tr",[s("td",[e._v("Immediate")]),s("td",[s("code",[e._v("lda #$2a")])])]),s("tr",[s("td",[e._v("Implied")]),s("td",[s("code",[e._v("dex")])])]),s("tr",[s("td",[e._v("Indexed, Indirect")]),s("td",[s("code",[e._v("lda ($20,x)")])])]),s("tr"),s("tr",[s("td",[e._v("Indirect")]),s("td",[s("code",[e._v("jmp ($c000)")])])]),s("tr",[s("td",[e._v("Indirect, Indexed")]),s("td",[s("code",[e._v("lda ($20),y")])])]),s("tr",[s("td",[e._v("Relative")]),s("td",[s("code",[e._v("beq $c010")])]),s("td",[e._v("Enter target address of branch.")])]),s("tr",[s("td",[e._v("Zero Page")]),s("td",[s("code",[e._v("lda $c0")])])]),s("tr",[s("td",[e._v("Zero Page,X")]),s("td",[s("code",[e._v("lda $fe,x")])])]),s("tr",[s("td",[e._v("Zero Page,Y")]),s("td",[s("code",[e._v("lda $fe,y")])])])]),s("p",[e._v(" The assembler expects lowercase operands but opcodes are not case-sensitive. The disassembler will display opcodes in ALL CAPS and operands in lowercase. ")])])])])}],r=(a("a4ec"),a("2877")),o={},n=Object(r["a"])(o,s,i,!1,null,"504976fe",null);t["default"]=n.exports},"754b":function(e,t,a){"use strict";a.r(t);var s=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},i=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"about"},[a("div",{staticClass:"about-content"},[a("h1",[e._v("About 650Vue")]),a("p",[e._v(" 650Vue is a single-page application written in Vue.js that simulates the MOS 6502 microprocessor. The simulator includes register displays, status lights, an internal clock, a video display, file I/O (read-only in the public version), and a full-featured terminal with a machine-language monitor, assembler, and disassembler. 650Vue simulates the full official instruction set of the 6502 and even attempts to replicate some well-documented bugs in the original hardware. A Vuex store acts like a data bus and allows the virtual CPU to address a full 64 kilobytes of virtual RAM. The simulated internal clock, running at approximately 600kHz, can handle an IRQ interrupt service routine on each browser display repaint cycle. ")]),a("p",[e._v(" If you would like to learn more about how 650Vue is put together, you can "),a("a",{attrs:{href:"https://github.com/drskinner/650vue",target:"_blank"}},[e._v("browse the public repository")]),e._v(" on GitHub. The public version of 650Vue is hosted on GitHub at "),a("a",{attrs:{href:"https://drskinner.github.io/650vue/"}},[e._v("https://drskinner.github.io/650vue/")]),e._v(". ")]),a("h2",[e._v("Simulators vs. Emulators")]),a("p",[e._v(" 650Vue is more of a 6502 simulator than a 6502 emulator. A "),a("em",[e._v("simulator")]),e._v(" creates a software environment capable of executing arbitrary code; an "),a("em",[e._v("emulator")]),e._v(" attempts to mimic some real-world hardware as closely as possible. 650Vue does not emulate any actual computer hardware but employs a lot of tricks to simulate a working machine. There is no data bus and no address bus; the CPU registers and RAM all live in a Vuex store. File I/O is handled with an Axios call to local storage. The video \"display\" is a big textarea that mirrors the bytes stored in screen RAM. I've faked the clock oscillator (see below), but even so, 650Vue can run interrupt-driven 6502 machine-language programs as long as precise timing is not a requirement. Although 650Vue has no real-world analogue, it is a bit like a more user-friendly version of MOS Technology, Inc.'s "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/KIM-1"}},[e._v("KIM-1")]),e._v(" computer. ")]),a("h2",[e._v("Timing, Interrupts, and the Virtual Clock")]),a("p",[e._v(" 650Vue does not implement a precise clock. Instead, it will try to run 10,000 CPU cycles' worth of machine-language instructions on every browser repaint. The repaint typically occurs 60 times per second, so we can aspire to an effective clock rate of 600,000 CPU cycles per second, or 600kHz. However, the repaint rate tends to fluctuate, and a slow repaint or heavy garbage collection can put a serious dent in the browser's frame rate, causing the virtual CPU's effective clock speed to drop. 650Vue isn't really optimized for steady performance, but it can run programs at close to full speed if we're willing to tolerate small inaccuracies in the timing. ")]),a("p",[e._v(" 650Vue can handle interrupt requests. On each browser repaint frame, after the CPU has burned through 10,000-ish cycles, it will check bit 2 of the status registerâ€”the interrupt disable flag. If interrupts are enabled, the CPU will jump to the routine pointed to by the 6502's IRQ vector and will resume normal execution when it encounters an RTI (Return From Interrupt) instruction. You need to be careful, though, because interrupt-driven routines can eat a LOT of your computer's RAM and CPU. If your machine gets hot and your fan starts running excessively, the STOP button will generate an NMI (Non-Maskable Interrupt) and immediately halt execution. ")])])])}],r=(a("19d5"),a("2877")),o={},n=Object(r["a"])(o,s,i,!1,null,"6cb3bf07",null);t["default"]=n.exports},9674:function(e,t,a){},a4ec:function(e,t,a){"use strict";var s=a("f895"),i=a.n(s);i.a},b105:function(e,t,a){e.exports=a.p+"img/status_lights.79b8cfdc.png"},c025:function(e,t,a){e.exports=a.p+"img/terminal.9d9c2820.png"},de69:function(e,t,a){"use strict";a.r(t);var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"manual"},[e._m(0),a("section",{attrs:{id:"manual-registers"}},[e._m(1),a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"},[a("div",{staticClass:"segment-row"},[a("b",[e._v("AC")]),e._v(" "),a("Segment",{attrs:{value:66,size:"byte"}}),a("b",[e._v(" XR")]),e._v(" "),a("Segment",{attrs:{value:196}}),a("b",[e._v(" YR")]),e._v(" "),a("Segment",{attrs:{value:165}})],1),a("div",[a("b",[e._v("SP")]),e._v(" "),a("Segment",{attrs:{value:253}}),a("b",[e._v(" PC")]),e._v(" "),a("Segment",{attrs:{value:57495,size:"word"}})],1)]),e._m(2)])]),e._m(3),e._m(4),e._m(5),a("section",{attrs:{id:"manual-terminal"}},[e._m(6),a("div",{staticClass:"row"},[e._m(7),a("div",{staticClass:"column-right"},[a("p",[e._v("On the left side of the browser window, situated between the two sets of segmented displays, you will find the virtual terminal. The large, upper window displays the terminal's output, and the small, lower box is where you enter commands. There's no \"submit\" button; just enter a one-line command into the input box and press RETURN. The terminal will process your command and display the results in the output window.")]),a("p",[e._v('The terminal is the main way of interacting with the virtual machine; it gives you access to registers, memory, and a simple assembler/disassembler through a program known as a "machine language monitor". The monitor has many useful featuresâ€”please consult the '),a("router-link",{attrs:{to:{name:"TerminalHelp"}}},[e._v("Terminal Documentation")]),e._v(" for more detailed information.")],1)])])]),e._m(8),e._m(9)])},i=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("section",{attrs:{id:"manual-intro"}},[a("div",{staticClass:"disclaimer"},[e._v("The information in this manual has been reviewed and is believed to be entirely reliable. However, no responsibility is assumed for inaccuracies. The material in this manual is for informational purposes only and is subject to change without notice.")]),a("h1",[e._v("650Vue Manual")]),a("p",[e._v("Congratulations and welcome to the exciting new world of micro-computers! As a user of the 650Vue Microcomputer Simulator Moduleâ„¢, you now have at your disposal a completely operational, fully tested"),a("sup",[e._v("1")]),e._v(", and very capable virtual computer built in VueJS. By selecting 650Vue, you have eliminated all of the problems of constructing and debugging a microcomputer system. No wiring or soldering! Your time is now available for learning the operation of the system and beginning immediately to apply it to your specific areas of interest.")]),a("p",[e._v('At the heart of 650Vue is a simulated MOS 6502 microprocessor. The 650Vue system is intended to provide you with a capable microcomputer for use in your "real-world" applications. Accordingly, the system includes a full 64 kilobytes of virtual RAM to provide data and program storage for your application program. In addition, you are provided with status lights, digital readouts, a video output device, and a terminal for communicating with the virtual machine.')]),a("p",[e._v("This manual cannot presume to provide all of the technical information on the hardware or programming aspects of the simulated 6502 microprocessor. If you would like to learn more about 6502 programming, I recommend some "),a("a",{attrs:{href:"http://www.6502.org/tutorials/",target:"_blank"}},[e._v("6502 Tutorials")]),e._v(". So much for introductory comments! Now lets get started and take a look at the components of 650Vue.")]),a("p",[a("b",[e._v("Quick Start:")]),e._v(" If you just want to try running some software from the terminal, type "),a("code",[e._v("$")]),e._v(" into the terminal input window and press RETURN. This will give you a listing of all the files on disk. To load Conway's Game of Life, enter "),a("code",[e._v("l conway")]),e._v(" ("),a("code",[e._v("l")]),e._v(" as in "),a("code",[e._v("load")]),e._v(") into the terminal. Once the program has loaded, press the "),a("b",[e._v("RUN")]),e._v(" button or follow the on-screen instructions to run the simulation.")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"}),a("div",{staticClass:"column-right"},[a("h2",[e._v("Registers")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"column-right"},[a("p",[e._v("The segmented displays (pictured at left) show the values of 650Vue's registers as they update in real time. At the normal execution speed of 600kHz, these displays update too quickly to be meaningful. When running in single-step mode or setting break points with the "),a("code",[e._v("BRK")]),e._v(" instruction, these displays provide a useful debugging tool.")]),a("p",[e._v("Each register is labelled: "),a("b",[e._v("AC")]),e._v(" for the accumulator, a register primarily concerned with arithmetic and logic operations; "),a("b",[e._v("XR")]),e._v(" and "),a("b",[e._v("YR")]),e._v(" for the X- and Y-registers, mainly used for loops and indexing; "),a("b",[e._v("SP")]),e._v(" for the stack pointer, which points to an address on page 01 of RAM ("),a("code",[e._v("$0100")]),e._v("â€“"),a("code",[e._v("$01ff")]),e._v("), and "),a("b",[e._v("PC")]),e._v(" for the program counter, which indicates the address of the next instruction to be executed.")]),a("p",[e._v("The 6502 processor status register is not shown with a segmented digital display, but instead with a strip of status lights as described in the next section.")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("section",{attrs:{id:"manual-status"}},[s("div",{staticClass:"row"},[s("div",{staticClass:"column-left"}),s("div",{staticClass:"column-right"},[s("h2",[e._v("Status Flags")])])]),s("div",{staticClass:"row"},[s("div",{staticClass:"column-left"},[s("img",{staticClass:"clipping-full",attrs:{src:a("b105")}})]),s("div",{staticClass:"column-right"},[s("p",[e._v("A row of eight lights displays the flags of the processor status registerâ€”if a light is on, the corresponding bit in the status register is set. Many 6502 instructions will affect the state of the flags. From left to right, the flags are: Negative ("),s("b",[e._v("N")]),e._v("), Overflow ("),s("b",[e._v("V")]),e._v("), Unused ("),s("b",[e._v("â€“")]),e._v("), Break ("),s("b",[e._v("B")]),e._v("), Decimal ("),s("b",[e._v("D")]),e._v("), Interrupt ("),s("b",[e._v("I")]),e._v("), Zero ("),s("b",[e._v("Z")]),e._v("), and Carry ("),s("b",[e._v("C")]),e._v("). The unused flag, bit 5 of the status register, always returns 1 when read, imitating the behaviour of a real 6502.")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("section",{attrs:{id:"manual-control"}},[a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"}),a("div",{staticClass:"column-right"},[a("h2",[e._v("Control Buttons")])])]),a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"},[a("div",{staticClass:"button-row"},[a("button",[e._v("RUN")]),a("button",[e._v("STEP")]),a("button",[e._v("STOP")]),a("button",[e._v("RESET")])])]),a("div",{staticClass:"column-right"},[a("p",[e._v("There are three buttons to control the running state of the machine and one button to reset the virtual CPU. "),a("b",[e._v("RUN")]),e._v(" will begin executing instructions starting from the address indicated by the program counter. 650Vue will continue program execution until either the "),a("b",[e._v("STOP")]),e._v(" button is pressed or it encounters a "),a("code",[e._v("BRK")]),e._v(" instruction or an undefined opcode. While the CPU is stopped, you can single-step through your code, executing one instruction at a time by pressing the "),a("b",[e._v("STEP")]),e._v(" button.")]),a("p",[e._v("The "),a("b",[e._v("RESET")]),e._v(" button returns the virtual machine to a predictable initial state. The reset sets the accumulator, x-register, and y-register to zero, fills the stack with zero bytes and initializes the stack pointer to "),a("code",[e._v("$fd")]),e._v(", sets status flags to zero, and sets the program counter to the address contained in the reset vector at addresses "),a("code",[e._v("$fffc")]),e._v(" and "),a("code",[e._v("$fffd")]),e._v(". The reset process will not clear RAM so that any programs you have in memory persist.")]),a("p",[e._v("When 650Vue is first loaded in your web browser, all registers are in a random state. You can use "),a("b",[e._v("RESET")]),e._v(" to initialize the machine.")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("section",{attrs:{id:"manual-video"}},[a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"}),a("div",{staticClass:"column-right"},[a("h2",[e._v("Video Display")]),a("p",[e._v("The large region underneath the status lights is a 50-column, 20-line monochrome video display. 650Vue treats the 1,000 bytes starting at address "),a("code",[e._v("$1000")]),e._v(" as virtual screen RAM and will draw characters corresponding to the ASCII value of each memory location in that region. For example, if you put the value "),a("code",[e._v("$41")]),e._v(" (65 in decimal) at memory location "),a("code",[e._v("$1000")]),e._v(", an 'A' will appear in the top-left corner of the video display. The display is updated on every second browser repaint, giving an effective framerate of roughly 30Hz in most browsers.")]),a("p",[e._v("I have plans to improve the video display in future versions by giving it colour capabilities, pixel graphics, and making the base address of screen RAM configurable.")])])]),a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"}),a("div",{staticClass:"column-right"})])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"}),a("div",{staticClass:"column-right"},[a("h2",[e._v("Terminal")])])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"column-left"},[s("img",{staticClass:"clipping-reduced",attrs:{src:a("c025")}})])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("section",{attrs:{id:"manual-zero-page"}},[a("div",{staticClass:"row"},[a("div",{staticClass:"column-left"}),a("div",{staticClass:"column-right"},[a("h2",[e._v("Zero Page")]),a("p",[e._v("The area of memory known as "),a("i",[e._v("zero page")]),e._v(" (addresses "),a("code",[e._v("$0000")]),e._v(" to "),a("code",[e._v("$00ff")]),e._v(") is important to 6502 programmers because instructions that operate on zero page use less memory and execute more quickly than those that operate on the full 64k address space. I've left most of zero page available for programs, but the first sixteen bytes ("),a("code",[e._v("$00")]),e._v(" to "),a("code",[e._v("$0f")]),e._v(") are reserved for a future operating system.")]),a("p",[e._v("At the moment, location "),a("code",[e._v("$000f")]),e._v(" acts like a read-only random number generator, so an instruction like "),a("code",[e._v("LDA $0f")]),e._v(" will fetch a random number between "),a("code",[e._v("$00")]),e._v(" and "),a("code",[e._v("$ff")]),e._v(" and store it in the accumulator.")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("section",{attrs:{id:"manual-footnotes"}},[a("hr"),a("p",[a("sup",[e._v("1")]),e._v("Not fully tested.")])])}],r=a("ca38"),o={name:"manual",components:{Segment:r["a"]}},n=o,l=(a("5563"),a("2877")),d=Object(l["a"])(n,s,i,!1,null,"4c52172c",null);t["default"]=d.exports},e772:function(e,t,a){},f895:function(e,t,a){}}]);
//# sourceMappingURL=pages.fab1aedc.js.map