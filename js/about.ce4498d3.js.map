{"version":3,"sources":["webpack:///./src/views/about.vue?145e","webpack:///./src/views/terminalHelp.vue?8b5d","webpack:///./src/views/terminalHelp.vue","webpack:///./src/views/about.vue?73d4","webpack:///./src/views/about.vue","webpack:///./src/views/terminalHelp.vue?deee","webpack:///./src/assets/manual/terminal.png"],"names":["render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v","attrs","script","component","module","exports"],"mappings":"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","file":"js/about.ce4498d3.js","sourcesContent":["import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./about.vue?vue&type=style&index=0&id=6cb3bf07&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./about.vue?vue&type=style&index=0&id=6cb3bf07&scoped=true&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"terminal-help-content\"},[_c('h1',[_vm._v(\"Using the Terminal\")]),_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"column-left\"},[_c('figure',[_c('img',{attrs:{\"src\":require(\"@/assets/manual/terminal.png\")}}),_c('figcaption',[_vm._v(\"650Vue's \"),_c('em',[_vm._v(\"Vuepermon\")]),_vm._v(\" virtual terminal\")])])]),_c('div',{staticClass:\"column-right\"},[_c('p',[_vm._v(\" The main way of interacting with the 650Vue virtual machine is through the virtual terminal. The large, upper window displays the terminal's output, and the small, lower box is where you enter commands. There's no \\\"submit\\\" button; just enter a one-line command into the input box and press RETURN. The terminal will process your command and display the results in the output window. \")]),_c('p',[_vm._v(\" The terminal gives you access to a monitor that is similar to Jim Butterfield's \"),_c('a',{attrs:{\"href\":\"https://github.com/jblang/supermon64\",\"target\":\"_blank\"}},[_vm._v(\"Supermon\")]),_vm._v(\" for Commodore's 8-bit computers. Anyone who used Supermon back in the day should feel right at home with 650Vue's monitorâ€”which, in the interest of terrible wordplay, we can call \"),_c('em',[_vm._v(\"Vuepermon\")]),_vm._v(\". With Vuepermon, you can examine and modify virtual RAM and the 6502's status registers. You can enter new instructions through the simple assembler and read through existing programs with the disassembler. You can load programs from the virtual disk and run them from the terminal. \")]),_c('h2',[_vm._v(\"Vuepermon Command Reference\")]),_c('dl',[_c('dt',[_c('code',[_vm._v(\"d [<address>]\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\"d c000\")]),_c('br'),_vm._v(\" Disassemble 16 instructions beginning at <address>. After the first 16 lines are displayed, entering \"),_c('code',[_vm._v(\"d\")]),_vm._v(\" with no arguments will continue disassembling from where you left off. \")]),_c('dt',[_c('code',[_vm._v(\"g [<address>]\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\"g c000\")]),_c('br'),_vm._v(\" Begin executing code from \"),_c('code',[_vm._v(\"address\")]),_vm._v(\". 650Vue will continue execution until it encounters a \"),_c('code',[_vm._v(\"BRK\")]),_vm._v(\" instruction, an illegal opcode, or receives a Non-Maskable Interrupt telling it to stop. If you don't supply an address, execution will begin at the program counter's current value. \")]),_c('dt',[_c('code',[_vm._v(\"l <filename>\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\"l hello\")]),_c('br'),_vm._v(\" Load \"),_c('code',[_vm._v(\"filename\")]),_vm._v(\" from the virtual disk. Do not enclose filename in quotes. \")]),_c('dt',[_c('code',[_vm._v(\"m [<start_address>] [<end_address>]\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\"m bff0 c010\")]),_c('br'),_vm._v(\" Display up to 128 bytes of memory beginning at \"),_c('code',[_vm._v(\"start_address\")]),_vm._v(\". Each line of the display will list a 16-bit hexadecimal address, then the hexadecimal values of the 8 bytes starting at that address, followed by the ASCII representation of those same 8 bytes. After the first screenful of data, entering \"),_c('code',[_vm._v(\"m\")]),_vm._v(\" with no arguments will continue displaying memory from where you left off. \")]),_c('dt',[_c('code',[_vm._v(\"p <address>\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\"p c000\")]),_c('br'),_vm._v(\" Set the Program Counter to \"),_c('code',[_vm._v(\"address\")]),_vm._v(\". Used when you want to start single-stepping from a specific instruction. \")]),_c('dt',[_c('code',[_vm._v(\"r\")])]),_c('dd',[_vm._v(\" Display the 6502 registers. \")]),_c('dt',[_c('code',[_vm._v(\"z\")])]),_c('dd',[_vm._v(\" Fill screen RAM with zeroes and force a screen refresh, effectively clearing the video display. \")]),_c('dt',[_c('code',[_vm._v(\"> <address> <byte> [<byte> <byte> ...]\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\"> c010 48 65 6c 6c 6f 2c 20\")]),_c('br'),_vm._v(\" Write a series of hexadecimal bytes to memory, beginning at \"),_c('code',[_vm._v(\"address\")]),_vm._v(\". You can enter as many bytes as will fit in a single line of input. \")]),_c('dt',[_c('code',[_vm._v(\"; <pc> <sr> <ac> <xr> <yr> <sp>\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\"; c000 30 a0 00 00 fd\")]),_c('br'),_vm._v(\" Set all the CPU registers. You must include all registers in order, from left to right: program counter, status register, accumulator, x-register, y-register, and stack pointer. \")]),_c('dt',[_c('code',[_vm._v(\". <address> <opcode> [<operand>]\")])]),_c('dd',[_vm._v(\" Example: \"),_c('code',[_vm._v(\". c000 lda #$2a\")]),_c('br'),_vm._v(\" Assemble one instruction at \"),_c('code',[_vm._v(\"address\")]),_vm._v(\". The assembler will determine the correct addressing mode from the syntax of \"),_c('code',[_vm._v(\"operand\")]),_vm._v(\". You must enter the operand precisely (see Addressing Modes below). When you enter a valid instruction, the terminal will prompt you to enter a new opcode at the next available address. \")])]),_c('h2',[_vm._v(\"Addressing Modes\")]),_c('p',[_vm._v(\" Vuepermon's assembler is very simple and not user-friendly. As of this writing, you can't use labels or macros and you have to enter instructions with the precise syntax the assembler expects. While I don't intend to teach 6502 assembly language here, I thought it would be helpful to lay out the address modes and their syntax for reference. \")]),_c('table',[_c('tr',[_c('th',[_vm._v(\"Addressing Mode\")]),_c('th',[_vm._v(\"Example Syntax\")]),_c('th',[_vm._v(\"Comments\")])]),_c('tr',[_c('td',[_vm._v(\"Absolute\")]),_c('td',[_c('code',[_vm._v(\"jsr $ffd2\")])])]),_c('tr',[_c('td',[_vm._v(\"Absolute,X\")]),_c('td',[_c('code',[_vm._v(\"lda $c000,x\")])])]),_c('tr',[_c('td',[_vm._v(\"Absolute,Y\")]),_c('td',[_c('code',[_vm._v(\"sta $c000,y\")])])]),_c('tr',[_c('td',[_vm._v(\"Accumulator\")]),_c('td',[_c('code',[_vm._v(\"ror\")])]),_c('td',[_vm._v(\"Use \"),_c('code',[_vm._v(\"ror\")]),_vm._v(\" instead of \"),_c('code',[_vm._v(\"ror a\")]),_vm._v(\".\")])]),_c('tr',[_c('td',[_vm._v(\"Immediate\")]),_c('td',[_c('code',[_vm._v(\"lda #$2a\")])])]),_c('tr',[_c('td',[_vm._v(\"Implied\")]),_c('td',[_c('code',[_vm._v(\"dex\")])])]),_c('tr',[_c('td',[_vm._v(\"Indexed, Indirect\")]),_c('td',[_c('code',[_vm._v(\"lda ($20,x)\")])])]),_c('tr'),_c('tr',[_c('td',[_vm._v(\"Indirect\")]),_c('td',[_c('code',[_vm._v(\"jmp ($c000)\")])])]),_c('tr',[_c('td',[_vm._v(\"Indirect, Indexed\")]),_c('td',[_c('code',[_vm._v(\"lda ($20),y\")])])]),_c('tr',[_c('td',[_vm._v(\"Relative\")]),_c('td',[_c('code',[_vm._v(\"beq $c010\")])]),_c('td',[_vm._v(\"Enter target address of branch.\")])]),_c('tr',[_c('td',[_vm._v(\"Zero Page\")]),_c('td',[_c('code',[_vm._v(\"lda $c0\")])])]),_c('tr',[_c('td',[_vm._v(\"Zero Page,X\")]),_c('td',[_c('code',[_vm._v(\"lda $fe,x\")])])]),_c('tr',[_c('td',[_vm._v(\"Zero Page,Y\")]),_c('td',[_c('code',[_vm._v(\"lda $fe,y\")])])])]),_c('p',[_vm._v(\" The assembler expects lowercase operands but opcodes are not case-sensitive. The disassembler will display opcodes in ALL CAPS and operands in lowercase. \")])])])])}]\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./terminalHelp.vue?vue&type=template&id=ac5a73f6&scoped=true&\"\nvar script = {}\nimport style0 from \"./terminalHelp.vue?vue&type=style&index=0&id=ac5a73f6&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ac5a73f6\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"about\"},[_c('div',{staticClass:\"about-content\"},[_c('h1',[_vm._v(\"About 650Vue\")]),_c('p',[_vm._v(\" 650Vue is a single-page application written in Vue.js that simulates the MOS 6502 microprocessor. The simulator includes register displays, status lights, an internal clock, a video display, file I/O (read-only in the public version), and a full-featured terminal with a machine-language monitor, assembler, and disassembler. 650Vue simulates the full official instruction set of the 6502 and even attempts to replicate some well-documented bugs in the original hardware. A Vuex store acts like a data bus and allows the virtual CPU to address a full 64 kilobytes of virtual RAM. The simulated internal clock, running at approximately 600kHz, can handle an IRQ interrupt service routine on each browser display repaint cycle. \")]),_c('p',[_vm._v(\" If you would like to learn more about how 650Vue is put together, you can \"),_c('a',{attrs:{\"href\":\"https://github.com/drskinner/650vue\",\"target\":\"_blank\"}},[_vm._v(\"browse the public repository\")]),_vm._v(\" on GitHub. The public version of 650Vue is hosted on GitHub at \"),_c('a',{attrs:{\"href\":\"https://drskinner.github.io/650vue/\"}},[_vm._v(\"https://drskinner.github.io/650vue/\")]),_vm._v(\". \")]),_c('h2',[_vm._v(\"Simulators vs. Emulators\")]),_c('p',[_vm._v(\" 650Vue is more of a 6502 simulator than a 6502 emulator. A \"),_c('em',[_vm._v(\"simulator\")]),_vm._v(\" creates a software environment capable of executing arbitrary code; an \"),_c('em',[_vm._v(\"emulator\")]),_vm._v(\" attempts to mimic some real-world hardware as closely as possible. 650Vue does not emulate any actual computer hardware but employs a lot of tricks to simulate a working machine. There is no data bus and no address bus; the CPU registers and RAM all live in a Vuex store. File I/O is handled with an Axios call to local storage. The video \\\"display\\\" is a big textarea that mirrors the bytes stored in screen RAM. I've faked the clock oscillator (see below), but even so, 650Vue can run interrupt-driven 6502 machine-language programs as long as precise timing is not a requirement. Although 650Vue has no real-world analogue, it is a bit like a more user-friendly version of MOS Technology, Inc.'s \"),_c('a',{attrs:{\"href\":\"https://en.wikipedia.org/wiki/KIM-1\"}},[_vm._v(\"KIM-1\")]),_vm._v(\" computer. \")]),_c('h2',[_vm._v(\"Timing, Interrupts, and the Virtual Clock\")]),_c('p',[_vm._v(\" 650Vue does not implement a precise clock. Instead, it will try to run 10,000 CPU cycles' worth of machine-language instructions on every browser repaint. The repaint typically occurs 60 times per second, so we can aspire to an effective clock rate of 600,000 CPU cycles per second, or 600kHz. However, the repaint rate tends to fluctuate, and a slow repaint or heavy garbage collection can put a serious dent in the browser's frame rate, causing the virtual CPU's effective clock speed to drop. 650Vue isn't really optimized for steady performance, but it can run programs at close to full speed if we're willing to tolerate small inaccuracies in the timing. \")]),_c('p',[_vm._v(\" 650Vue can handle interrupt requests. On each browser repaint frame, after the CPU has burned through 10,000-ish cycles, it will check bit 2 of the status registerâ€”the interrupt disable flag. If interrupts are enabled, the CPU will jump to the routine pointed to by the 6502's IRQ vector and will resume normal execution when it encounters an RTI (Return From Interrupt) instruction. You need to be careful, though, because interrupt-driven routines can eat a LOT of your computer's RAM and CPU. If your machine gets hot and your fan starts running excessively, the STOP button will generate an NMI (Non-Maskable Interrupt) and immediately halt execution. \")])])])}]\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./about.vue?vue&type=template&id=6cb3bf07&scoped=true&\"\nvar script = {}\nimport style0 from \"./about.vue?vue&type=style&index=0&id=6cb3bf07&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6cb3bf07\",\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./terminalHelp.vue?vue&type=style&index=0&id=ac5a73f6&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./terminalHelp.vue?vue&type=style&index=0&id=ac5a73f6&scoped=true&lang=css&\"","module.exports = __webpack_public_path__ + \"img/terminal.9d9c2820.png\";"],"sourceRoot":""}