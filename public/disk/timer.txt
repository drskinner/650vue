Loading interrupt-driven timer...

* timer routine starts at $c000
* timer reset at $b000

; Timer runs on the IRQ synced to the
; browser refresh rate (60Hz).

; set reset vector
> fffc 00 c0

; initialize clock registers
; values are ASCII - $30
; $ff: interrupt cycle counter
; $fe: tenths of a second
; $fd: dot
; $fb, $fc: seconds
; $fa: colon
; $f8, $f9: minutes
> 00f8 01 01 0a 01 01 fe 01 06

; reset timer
. b000 LDA #$00
. b002 STA $fe
. b004 STA $fc
. b006 STA $fb
. b008 STA $f9
. b00a STA $f8
. b00c LDA #$30
. b00e STA $11d7
. b011 STA $11d8
. b014 STA $11da
. b017 STA $11db
. b01a STA $11dd
. b01d BRK

; set IRQ vector
. c000 SEI
. c001 LDA #$00
. c003 STA $fffe ; vector low byte
. c006 LDA #$d0
. c008 STA $ffff ; vector high byte
. c00b CLI

; draw clock ad infinitum
. c00c LDX #$07
. c00e LDA $f7,x
. c010 CLC
. c011 ADC #$30
. c013 STA $11d6,x
. c016 DEX 
. c017 BNE $c00e
. c019 JMP $c00c

; interrupt service routine
. d000 PHA
. d001 LDY #$00
. d003 DEC $ff   ; decrease timer
. d005 BNE $d03d ; RTI if not 0
. d007 LDA #$06  ; reset timer if 0
. d009 STA $ff   ; timer address
. d00b INC $fe   ; increment tenths
. d00d LDA $fe
. d00f CMP #$0a  ; tenths roll over?
. d011 BNE $d03d
. d013 STY $fe   ; reset tenths
. d015 INC $fc   ; increment second units
. d017 LDA $fc
. d019 CMP #$0a  ; second units roll over?
. d01b BNE $d03d
. d01d STY $fc   ; reset second units
. d01f INC $fb   ; increment second tens
. d021 LDA $fb
. d023 CMP #$06  ; 60 seconds?
. d025 BNE $d03d
. d027 STY $fb   ; reset second tens
. d029 INC $f9   ; increment minute units
. d02b LDA $f9
. d02d CMP #$0a  ; 10 minutes?
. d02f BNE $d03d
. d031 STY $f9   ; reset minute units
. d033 INC $f8
. d035 LDA $f8
. d037 CMP #$06  ; 60 minutes?
. d039 BNE $d03d
. d03b STY $f8
. d03d PLA       
. d03e RTI
